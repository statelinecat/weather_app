import requests
from datetime import datetime
from typing import Dict, Optional, Any
from interfaces import IWeatherProvider
import logging

logger = logging.getLogger(__name__)

class OpenMeteoWeatherProvider(IWeatherProvider):
    def __init__(self, geocoding_provider: 'IGeocodingProvider'):
        self.geocoding_provider = geocoding_provider

    def get_weather(self, city: str) -> Optional[Dict[str, Any]]:
        logger.debug(f"Getting coordinates for city: {city}")
        lat, lon = self.geocoding_provider.get_coordinates(city)
        logger.debug(f"Coordinates: {lat}, {lon}")

        if lat is None or lon is None:
            logger.error("Failed to get coordinates")
            return None

        url = "https://api.open-meteo.com/v1/forecast"
        params = {
            "latitude": lat,
            "longitude": lon,
            "daily": "temperature_2m_max,temperature_2m_min,weathercode",
            "hourly": "temperature_2m,weathercode",
            "timezone": "auto",
            "forecast_days": 7
        }

        try:
            logger.debug(f"Requesting weather data from {url}")
            response = requests.get(url, params=params)
            logger.debug(f"Response status: {response.status_code}")
            logger.debug(f"Response text: {response.text[:200]}...")  # –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤

            if response.status_code == 200:
                return self._parse_weather_data(response.json(), city)
            else:
                logger.error(f"API returned status {response.status_code}")
        except Exception as e:
            logger.error(f"Error getting weather: {str(e)}")

        return None

    def _parse_weather_data(self, data: Dict, city: str) -> Dict[str, Any]:
        forecast = []
        for i in range(len(data['daily']['time'])):
            code = data['daily']['weathercode'][i]
            forecast.append({
                'date': data['daily']['time'][i],
                'temperature_day': round(data['daily']['temperature_2m_max'][i]),
                'temperature_night': round(data['daily']['temperature_2m_min'][i]),
                'description': self._weather_code_to_text(code),
                'icon': self._get_weather_icon(code)
            })

        now = datetime.now()
        hourly = []
        for i, time_str in enumerate(data['hourly']['time']):
            time_obj = datetime.fromisoformat(time_str)
            if 0 <= (time_obj - now).total_seconds() <= 6 * 3600:
                code = data['hourly']['weathercode'][i]
                hourly.append({
                    'time': time_obj.strftime('%H:%M'),
                    'temp': round(data['hourly']['temperature_2m'][i]),
                    'description': self._weather_code_to_text(code),
                    'icon': self._get_weather_icon(code)
                })

        return {
            'city': city.title(),
            'forecast': forecast,
            'hourly': hourly
        }

    def _get_weather_icon(self, code: int) -> str:
        icon_map = {
            0: "‚òÄÔ∏è", 1: "üå§", 2: "‚õÖÔ∏è", 3: "‚òÅÔ∏è", 45: "üå´", 48: "üå´",
            51: "üå¶", 53: "üåß", 55: "üåß", 61: "üå¶", 63: "üåß", 65: "üåß",
            71: "üå®", 73: "‚ùÑÔ∏è", 75: "‚ùÑÔ∏è", 95: "üå©", 99: "‚õà"
        }
        return icon_map.get(code, "üåà")

    def _weather_code_to_text(self, code: int) -> str:
        code_map = {
            0: "–Ø—Å–Ω–æ", 1: "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æ", 2: "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å", 3: "–ü–∞—Å–º—É—Ä–Ω–æ",
            45: "–¢—É–º–∞–Ω", 48: "–ò–Ω–µ–π", 51: "–ú–æ—Ä–æ—Å—å —Å–ª–∞–±–∞—è", 53: "–ú–æ—Ä–æ—Å—å", 55: "–ú–æ—Ä–æ—Å—å —Å–∏–ª—å–Ω–∞—è",
            61: "–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å", 63: "–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å", 65: "–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å",
            71: "–°–Ω–µ–≥ —Å–ª–∞–±—ã–π", 73: "–£–º–µ—Ä–µ–Ω–Ω—ã–π —Å–Ω–µ–≥", 75: "–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥",
            95: "–ì—Ä–æ–∑–∞", 99: "–ì—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º"
        }
        return code_map.get(code, "")